# syslog/relp

grok {
    # general match for log lines
    match => { "@message" => "^(?:%{INT:syslog6587_msglen} )?<%{POSINT:syslog_pri}>(%{SPACE})?(?:%{NONNEGINT:syslog5424_ver} )?(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{UUID:syslog_program} (?:\[%{DATA:syslog_pid}\])? - %{GREEDYDATA:syslog_message}$" }
    add_tag => [ "syslog_standard" ]
    add_field => { "@raw" => "%{@message}"}
    tag_on_failure => ["fail/syslog_standard/_grokparsefailure"]
    tag_on_timeout => ["fail/syslog_standard/_grokparsetimeout"]
}
if !("fail/syslog_standard/_grokparsefailure" in [tags]) {
    syslog_pri { }

    date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
        timezone => "UTC"
        remove_field => "syslog_timestamp"
    }

    # Populate @source.host
    mutate {
        add_field => [ "[@source][host]", "%{syslog_hostname}" ]
    }

    mutate {
        convert => [ "syslog5424_ver", "integer" ]
        convert => [ "syslog6587_msglen", "integer" ]
    }

    if [syslog5424_ver] == 1 {
        grok {
            match => {
                "syslog_message" => "^(?:%{SYSLOG5424SD:metrics_sd})?(?:%{SYSLOG5424SD:syslog_sd})\s?(%{GREEDYDATA:syslog_message})?$"
            }
            overwrite => [
                "syslog_message"
            ]
            tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424" ]
            tag_on_timeout => [ "fail/syslog_standard/_grokparsetimeout-syslog_standard-5424" ]
        }

        # structured-data for metrics
        if [metrics_sd] {
            grok {
                match => [ "metrics_sd", "\[%{DATA:metrics_sd_id} (?<metrics_sd_params_raw>[^\]]+)\]" ]
                remove_field => [
                    "metrics_sd"
                ]
                tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424/metrics_sd" ]
                tag_on_timeout => [ "fail/syslog_standard/_grokparsetimeout-syslog_standard-5424/metrics_sd" ]
            }

            if !("fail/syslog_standard/_grokparsefailure-syslog_standard-5424/metrics_sd" in [tags]) {
                # convert the the key-value pairs
                kv {
                    source => "metrics_sd_params_raw"
                    target => "metrics_sd_params"
                    remove_field => [
                        "metrics_sd_params_raw"
                    ]
                }
            }
        }

        # structured-data
        if [syslog_sd] {
            grok {
                match => [ "syslog_sd", "\[%{DATA:syslog_sd_id} (?<syslog_sd_params_raw>[^\]]+)\]" ]
                remove_field => [
                    "syslog_sd"
                ]
                tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424/sds" ]
                tag_on_timeout => [ "fail/syslog_standard/_grokparsetimeout-syslog_standard-5424/sds" ]
            }

            if !("fail/syslog_standard/_grokparsefailure-syslog_standard-5424/sd" in [tags]) {
                # convert the the key-value pairs
                kv {
                    source => "syslog_sd_params_raw"
                    target => "syslog_sd_params"
                    remove_field => [
                        "syslog_sd_params_raw"
                    ]
                }
                # When an additional host is specified in the sd_params, promote syslog_hostname to @shipper.host
                # and replace @source.host with sd_params.host
                if [syslog_sd_params][host] {
                  mutate {
                    add_field => { "[@shipper][host]" => "%{[syslog_hostname]}" }
                    replace => { "[@source][host]" => "%{[syslog_sd_params][host]}" }
                  }
                }

                if [syslog_sd_params][__v1_type] {
                   # when the syslog params include a type, prepare the message for parsing by additional downstream parsing rules:
                   #  - Change the @type - this triggers downstream parsing rules
                   #  - @message_body = 'unparsed' message body that will be parsed by downstream @type rules
                   mutate {
                      rename => { "[syslog_sd_params][__v1_type]" => "@type" }

                   }
                }
            }
        }
    }

    # @message should contain the remaining unparsed text
    mutate {
      rename => { "syslog_message" => "@message" }
    }
}
