##--------------------------
# App conf. Parses app logs.|
##--------------------------

if [@index_type] == "app" {
    mutate {
      add_tag => [ "app" ]
    }

    # Parse Cloud Foundry logs from aggregate drain
    # (for message format see https://datatracker.ietf.org/doc/html/rfc5424#section-6)

    # set @cf fields
    mutate {
      rename => { "[syslog_sd_params][organization_id]"     => "[@cf][org_id]" }
      rename => { "[syslog_sd_params][organization_name]"   => "[@cf][org]" }
      rename => { "[syslog_sd_params][space_id]"     => "[@cf][space_id]" }
      rename => { "[syslog_sd_params][space_name]"   => "[@cf][space]" }
      rename => { "[syslog_sd_params][app_id]"   => "[@cf][app_id]" }
      rename => { "[syslog_sd_params][app_name]" => "[@cf][app]" }
      rename => { "[syslog_sd_params][instance_id]" => "[@cf][app_instance]" }
      rename => { "[syslog_sd_params][process_id]" => "[@cf][process_id]" }
      rename => { "[syslog_sd_params][process_instance_id]" => "[@cf][process_instance_id]" }
      rename => { "[syslog_sd_params][process_type]" => "[@cf][process_type]" }
      convert => { "[@cf][app_instance]" => "integer" }
    }

    # Set @source fields
    mutate {
      rename => { "[syslog_sd_params][origin]" => "[@source][component]" }
      rename => { "[syslog_sd_params][deployment]" => "[@source][deployment]" }
      rename => { "[syslog_sd_params][job]" => "[@source][job]" }
      rename => { "[syslog_sd_params][index]" => "[@source][job_index]" }
      rename => { "[syslog_sd_params][ip]" => "[@source][host]" }
      rename => { "[syslog_sd_params][source_type]" => "[@source][type]" }
      rename => { "[syslog_sd_params][source_id]" => "[@source][id]" }
    }

    # Override @metadata.index
    if [@cf][org] {
      mutate { replace => { "[@metadata][index]" => "%{[@metadata][index]}-%{[@cf][org]}" } }
      if [@cf][space] {
          mutate { replace => { "[@metadata][index]" => "%{[@metadata][index]}-%{[@cf][space]}" } }
      }
      mutate { lowercase => [ "[@metadata][index]" ] }
    }

    # Set [@source][type] (based on @type by default,
    # for LogMessage we override it with source_type field that comes in event's json)
    translate {
      source => "@type"
      dictionary => [ "LogMessage",       "LOG",
                      "Error",            "ERR",
                      "ContainerMetric",  "CONTAINER",
                      "ValueMetric",      "METRIC",
                      "HttpStartStop",    "HTTP"
      ]
      target => "[@source][type]"
      override => true
      fallback => "NA"
    }

#     if "_jsonparsefailure" in [tags] {

#         # Amend the failure tag to match our fail/${addon}/${filter}/${detail} standard
#         mutate {
#             add_tag => ["fail/cloudfoundry/app/json"]
#             remove_tag => ["_jsonparsefailure"]
#         }

#     } else {

#         # Set @timestamp

#         if [parsed_json_field][timestamp] or [parsed_json_field][start_timestamp] {

#             # set @timestamp from event's timestamp if it is passed

#             mutate {
#               rename => { "[parsed_json_field][start_timestamp]" => "event_timestamp" } # HttpStartStop event case
#               rename => { "[parsed_json_field][timestamp]" => "event_timestamp" }
#               convert => { "event_timestamp" => "string" }
#               gsub => ["event_timestamp", "\d{6}$", ""]
#             }
#             date {
#               match => [ "event_timestamp", "UNIX_MS" ]
#               remove_field => [ "event_timestamp" ]
#             }
#         } else if [parsed_json_field][time] {

#             # if event's timestamp is not passed then we set @timestamp = event shipping time from firehose-to-syslog

#             date {
#               match => [ "[parsed_json_field][time]", "ISO8601"]
#             }
#         }
#         mutate {
#           remove_field => [ "[parsed_json_field][time]" ]
#         }


#         # Set @message and @level

#         # 1) Replace the unicode \u2028 with \n, which Kibana will display as a new line.
#         # 2) Replace the unicode Null character \u0000 with ""
#         mutate {
#           gsub => [ "[parsed_json_field][msg]", '\u2028', "
# " # Seems that passing a string with an actual newline in it is the only way to make gsub work.
#           ]
#           gsub => [ "[parsed_json_field][msg]", '\u0000', ""]
#         }

#         mutate {
#           rename => { "[parsed_json_field][msg]" => "@message" } # @message
#           rename => { "[parsed_json_field][level]" => "@level" } # @level
#         }

#         # Set @source fields
#         mutate {
#           rename => { "[parsed_json_field][ip]"          => "[@source][host]" }
#           rename => { "[parsed_json_field][deployment]"  => "[@source][deployment]" }
#           rename => { "[parsed_json_field][job]"         => "[@source][job]" }
#           rename => { "[parsed_json_field][job_index]"   => "[@source][job_index]" }
#           # override
#           rename => { "[parsed_json_field][origin]"      => "[@source][component]" }
#         }

#         if ![parsed_json_field][event_type] {
#           mutate {
#             add_field => { "[parsed_json_field][event_type]" => "UnknownEvent" }
#           }
#         }

#         # Set @type (based on event_type)
#         mutate {
#           replace => { "@type" => "%{[parsed_json_field][event_type]}" }
#         }


#         # Set @cf fields
#         mutate {
#           rename => { "[parsed_json_field][org_id]"     => "[@cf][org_id]" }
#           rename => { "[parsed_json_field][org_name]"   => "[@cf][org]" }
#           rename => { "[parsed_json_field][space_id]"   => "[@cf][space_id]" }
#           rename => { "[parsed_json_field][space_name]" => "[@cf][space]" }
#           rename => { "[parsed_json_field][app_id]"     => "[@cf][app_id]" }
#           rename => { "[parsed_json_field][app_name]"   => "[@cf][app]" }

#           remove_field => "[parsed_json_field][cf_origin]"  # cf_origin = firehose all the time
#           remove_field => "[parsed_json_field][cf_ignored_app]"  # cf_ignored_app = false all the time (https://github.com/cloudfoundry-community/firehose-to-syslog/issues/137)
#         }

#         # Define [parsed_json_field_name]
#         mutate {
#           add_field => { "parsed_json_field_name" => "%{@type}"}
#         }


#     }

}
