#!/bin/bash

set -ex
export OPS_JOB_NAME=opensearch
export OPS_JOB_DIR=/var/vcap/jobs/$OPS_JOB_NAME
export JOB_NAME=opensearch_config
export JOB_DIR=/var/vcap/jobs/$JOB_NAME
export TMPDIR=/var/vcap/sys/tmp/$JOB_NAME
export DATA_DIR=/var/vcap/data/opensearch_config
<%
opensearch_host = p("opensearch_config.opensearch.host")
opensearch_port = p("opensearch_config.opensearch.port")
%>


# Delete existing templates before uploading
URL=https://<%= opensearch_host %>:<%= opensearch_port %>
CA="--cacert ${OPS_JOB_DIR}/config/ssl/opensearch.ca"
CERT="--cert ${OPS_JOB_DIR}/config/ssl/opensearch-admin.crt"
KEY="--key ${OPS_JOB_DIR}/config/ssl/opensearch-admin.key"

wait_for_greenstate() {
  remaining=500
  echo "=== Waiting for Green status from opensearch..."
  until [ "${remaining}" -le 0 ]; do
    STATUS=curl -sw '\n%{http_code}' \
      ${KEY} \
      ${CERT}  \
      ${CA} \
      https://localhost:9200/_cluster/health?local=true
    if [[ $STATUS == *'"status":"green"'* ]]; then
      echo "Done"
      break
    fi
    remaining=$((remaining-15))
    sleep 15
  done
  if [ "${remaining}" -le 0 ]; then
    echo "Node failed to join the cluster"
    exit 1
  fi
}




for template in $(curl -s ${CA} ${CERT} ${KEY} ${URL}/_cat/templates | awk '{print $1}'); do
  if ! grep -qw ${template} <(echo "<%= p('opensearch_config.index_templates').map { |template| template.keys.first }.join(' ') %>"); then
    # hit template and index_template so we can try for legacy and component templates
    curl -s -XDELETE ${CA} ${CERT} ${KEY} ${URL}/_template/${template}
    curl -s -XDELETE ${CA} ${CERT} ${KEY} ${URL}/_index_template/${template}
  fi
done

<%
require 'uri'

def put_to_es(url_stem_base, es_config, request_params = {})
  ret = []
  es_config = Array(es_config)
  es_config.each do |config|
    if config.is_a? Hash
      ckey, content = config.to_a.first
    else
      ckey = ''
      content = config
    end

    if url_stem_base == ''
      url_stem = "#{ckey}".chomp('/')
    else
      url_stem = "#{url_stem_base}/#{ckey}".chomp('/')
    end

    if request_params.keys.any?
      params = URI.encode_www_form(request_params)
      url_stem << "?#{params}"
    end

    opensearch_host = p("opensearch_config.opensearch.host")
    opensearch_port = p("opensearch_config.opensearch.port")

    ret << "URL=https://#{opensearch_host}:#{opensearch_port}/#{url_stem}"
    if nil == content
     ret << 'curl -X DELETE ${CA} ${CERT} ${KEY} "${URL}"'
    else
      if content.start_with? '/var/vcap'
        ret << "CONTENT_PATH=\"#{content}\""
      else
        ret << <<BASH
CONTENT_PATH=${DATA_DIR}/opensearch_config-http_body.txt
cat <<EOF > ${CONTENT_PATH}
#{content}
EOF
BASH
      end

      ret << <<BASH
HTTP_CODE=$(curl -s -H 'Content-Type: application/json' -w '%{http_code}' -o ${DATA_DIR}/opensearch_config-response.txt -X PUT --data-binary @$CONTENT_PATH  ${CA} ${CERT} ${KEY} ${URL})

if grep --quiet "\"errors\":true" ${DATA_DIR}/opensearch_config-response.txt ; then
  cat ${DATA_DIR}/opensearch_config-response.txt >> /dev/stderr
  exit $HTTP_CODE
fi

if [ "$HTTP_CODE" -le "300" ]; then
  cat ${DATA_DIR}/opensearch_config-response.txt
else
  cat ${DATA_DIR}/opensearch_config-response.txt >> /dev/stderr
  exit $HTTP_CODE
fi
BASH
    end
  end #loop
  ret.join("\n")
end
%>

#
# wait for opensearch availability
#

wait_for_greenstate

echo "--- Component Templates"
<%= put_to_es('_component_template', p('opensearch_config.component_templates')) %>

echo "--- Index Templates"
<%= put_to_es('_index_template', p('opensearch_config.index_templates')) %>


echo "--- Documents"
<%= put_to_es('', p('opensearch_config.docs')) %>

echo "--- License"
<% if_p("opensearch_config.license") do |license| %>
  <%= put_to_es('_license', license, acknowledge: true) %>
<% end %>


