    # drop empty logs (eg: monit connection healthcheck)
    ruby {
      code => 'event.cancel if event.get("message") == "\u0000"'
    }

    #When behind haproxy, this is always the IP of the haproxy, not the IP of the actual host sending the data.
    #Remove it to avoid confusion
    mutate {
      remove_field => [ "host" ]
    }
    <% if 'DEBUG' == p('logstash.metadata_level') %>
    mutate {
      add_field => { "[@ingestor][service]" => "syslog" }
      add_field => { "[@ingestor][job]" => "<%= name %>/<%= index %>" }
    }
    ruby {
      code => '
        ingestor = event.get("@ingestor")
        ingestor["timestamp"] = Time.now.iso8601(3)
        event.set("@ingestor", ingestor)
      '
    }
    <% end %>

    #
    # Injected custom filters below from logstash_inject.filters manifest property
    #


    <% if !p('logstash_ingestor.ingest_syslog_enabled') %>
    grok {
        match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{SYSLOGPROG:program}%{SPACE}%{GREEDYDATA:newmessage}$" }
        tag_on_failure => ["fail/s3-start/_grokparsefailure"]
    }
    mutate {
        remove_field => ["timestamp","program"]
        replace => {"message" => "%{newmessage}" }
    }
    mutate {
       remove_field=> ["newmessage"]
    }
    <% end %>

    <% if 'DEBUG' == p('logstash.metadata_level') %>
        mutate {
            add_field => [ "@parser[job]", "<%= name %>/<%= index %>" ]
        }

        ruby {
            code => "event.set('@parser[timestamp]', Time.now.iso8601(3))"
        }
    <% end %>

    #
    # Default type to _logstash_input
    #

    alter {
        coalesce => [
            "type", "%{_logstash_input}", "%{_type}"
        ]
    }

    #
    # rewrite our defined globals
    #

    if [type] == 'redis' or [type] == 'redis-input' {
        mutate {
            remove_field => [ 'type' ]
        }
    }

    if [type] != '' {
        mutate {
            rename => [ "type", "@type" ]
        }
    }

    if [message] != '' {
        mutate {
            rename => [ "message", "@message" ]
        }
    } else if [message] == '' and [@message] !~ /^.+$/ {
        drop { }
    }

    #
    # avoid bad interpolations, like `%{type}` when its missing
    #

    if [@type] == "" {
        mutate {
            add_field => [ "@type", "unknown" ]
        }
    }

    #
    # ignore particularly useless lines
    #

    if [@message] =~ /^\s*$/ or [@message] =~ /^#.*$/ {
        drop { }
    }

    #
    # trim excessively long messages
    #
    truncate {
            fields => ["@message"]
            add_tag => [ "_logtrimmed" ]
            length_bytes => <%= p("logstash_parser.message_max_size") %>
    }

    #
    # trim excess whitespace
    #

    mutate {
        strip => [ "@message" ]
    }

    #
    # Additional filter types from deployment manifest
    #
